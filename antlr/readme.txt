README.TXT
	===================
	====-=-=-=-=-=-====
	=== WELCOME TO: ===
	===== QUANTAL =====
	===================
(The Queried ANTLR Attribute Language)

__Compilation Note:__

  This program requires the installation of antlr4 in order to compile; however, a
  precompiled version exists in the Antlr.tar archive, for ease-of-use.

__Language:__

  This program is based off a a simple declarative language, written in the
  ANTLR parser-generator environment and stored in Schema.g4, which should not
  be modified without caution. The language consists of four different types of
  statement: a clarify statement, a let statement, a load statement, and a get
  statement.

  __Clarify:__

    QUANTAL consists of three primitive types: ints, bools, and strings. In
    order to facilitate distinction of different classes of attributes, such as
    primitively identical but incomparable book titles and author names, a
    clarify statement can be used.

	_Example_
	  
	    clarify int as year;
          
	  Will declare that there is a new type, called year, which takes the
	  form of an integer primitive.
    
    Clarify statements must be used before any mention of the clarified type, as
    otherwise the parser will reject the undeclared type.

    (Note: reject does not necessarily mean "pass error"; it might
     just mean "fail". Due to the complexity of the language, not all
     pathological cases will identify themselves.)

  __Let:__

    QUANTAL's data-type declarations take the form of let statements, which tell
    the parser that there is to be a new data-type with some enumerated
    attributes of certain types.

      _Example_

          let Book int Year, bool Inprint, string Author;
        
	Will declare that the data-type known as book has three attributes: an
	int-typed attribute called Year, a boolean-typed attribute called
	Inprint, and a string-typed attribute called Author. Once a type is
	declared, data of that type can be loaded, which brings us to:
  
  __Load:__
    
    QUANTAL processes data given in a new-line terminated CSV (Comma Separated
    Value) file format, where each line represents a single data-entry to load
    into QUANTAL's memory. This is achieved by passing the name of the CSV file
    to the parser using a load statement

      _Example_
          
	  load Book "books.dat";
        
	Will ask QUANTAL to read in every line of books.dat as a csv data-entry
	of the type Book. The ordering of the values in the CSV load-file must
	be the same as the order of Attributes at the time of declaration, i.e.

	    let Book int Year, bool Inprint, string Author;

	will accept only

	    <YEAR (Number)>,<INPRINT ('true' or 'false')>,<AUTHOR double-quoted string>
    
    Note that a data-type consisting of only boolean-valued attributes will not
    be processed succesfully, due to the value-density of booleans, but this
    case is entirely pathological, as no book, movie, song, etc. will ever
    consist only of boolean values. Multiple load statements can be invoked, to
    load different data-types or to load from different files. The name of the
    file must be in double-quotes.

  __Get:__

    QUANTAL retrieves stored data when given a get statement, in a similar
    format to the load statement:

      _Example_
          
	  get Book "query.dat";

       Will tell QUANTAL that query.dat is a query-file that applies to Books,
       and will cause QUANTAL to parse each semicolon-or-period terminated line
       as a separate, individual query. As QUANTAL is in early development, it
       only supports queries specifying exact value requirements, and cannot
       parse '>', '>=', '<', '<=', or '!='. Due to the value-density of
       booleans, queries consisting of only booleans tend to be more costly than
       those containing booleans and integers, which are in turn typically more costly
       than those consisting of bools, integers, and strings.

__Running__

  __Compilation__
    
    The project can be compiled by running "make", which requires antlr4 or
    pre-compiled versions of the files generated by ANTLR (Schema*.java), which can be found in
    Antlr.tar. To run the file, call

	"java Main schema.dat"

    where schema.dat or equivalent is a file of QUANTAL statements (clarify,
    let, load, and get). A sample schema.dat exists already, but can be
    extended or modified in accordance with QUANTAL's syntax to allow extended
    searches. In addition, a sample books.dat and query.dat are also provided,
    but are only templates at best; the user is encouraged to make their own
    load and query files.
